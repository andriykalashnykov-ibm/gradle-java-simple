/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.14.3/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.owasp.dependencycheck'
    id 'jacoco'
}

group = "${appArtefactGroup}"
version = "${appArtefactVersion}"

java.sourceCompatibility = JavaVersion.VERSION_21
java.targetCompatibility = JavaVersion.VERSION_21

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {

    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testRuntimeOnly "org.junit.platform:junit-platform-launcher:${junitPlatformLauncher}"

    // This dependency is used by the application.
    implementation libs.guava

    // dependency to test :app:dependencyCheckAnalyze
     implementation "org.apache.commons:commons-lang3:${apacheCommonsLangVersion}"
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'org.example.App'

    // Configure JVM arguments for Semeru FIPS mode
    applicationDefaultJvmArgs = [
        '-Dsemeru.fips=true',
        '-Dsemeru.customprofile=OpenJCEPlusFIPS.FIPS140-3'
    ]
}

tasks.named('test', Test) {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
    maxHeapSize = '1G'

    // Configure JVM arguments for Semeru FIPS mode during tests
    // Note: Only enable if FIPS profile is configured in java.security file
    // jvmArgs '-Dsemeru.fips=true', '-Dsemeru.customprofile=OpenJCEPlusFIPS.FIPS140-3'

    // For testing FIPS detection without actual FIPS mode, use these instead:
    jvmArgs '-Dsemeru.fips=false'

    // Show standard output and error during tests
    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        showStandardStreams = true
    }
}

//tasks.withType(JavaExec) {
//    jvmArgs += '--add-modules'
//    jvmArgs += 'jdk.incubator.vector'
//}
//
//tasks.withType(Test) {
//    jvmArgs += '--add-modules'
//    jvmArgs += 'jdk.incubator.vector'
//}

// OWASP Dependency-Check configuration
dependencyCheck {

    skip = Boolean.getBoolean("owasp.skip") // DEFAULT is false

    // This is intended to come from a local command-line setting, or from
    // an environment variable. CI uses the environment variable.
    // Using a command-line setting is poor practice without strong care
    // so that the key is not leaked.
    nvd.apiKey = findProperty("owasp.nvdApiKey") ?: System.getenv("NVD_API_KEY")


    // Format of the report (XML, HTML, CSV, JSON, JUNIT, ALL)
    formats = ['HTML', 'JSON', 'XML']

    // Directory where reports will be written
    outputDirectory = file("${layout.buildDirectory.get()}\n/reports/dependency-check")

    // Suppress false positives by CVE ID
    suppressionFile = file("$rootDir/dependency-check-suppressions.xml")

    // Skip test dependencies (optional)
    skipTestGroups = true

    // Auto-update the vulnerability database
    autoUpdate = true  // Set to false for testing without API key

    // Fail build on CVSS score above threshold (0-10)
    failBuildOnCVSS = 7.0f

    analyzers.jarEnabled = true
    analyzers.archiveEnabled = true


    // Database settings
    // Directory to store the vulnerability database
    data.directory = file("$rootDir/.gradle/dependency-check-data")
    // Username/password for database connection (if using database storage)
    // data.username = 'dc'
    // data.password = 'dc'
}

// Optional: Create a custom task to run dependency check with specific options
tasks.register('securityScan') {
    group = 'verification'
    description = 'Runs OWASP Dependency-Check security scan'
    dependsOn 'dependencyCheckAnalyze'

    doLast {
        println "Security scan complete. Check reports in: ${layout.buildDirectory.get()}/reports/dependency-check"
    }
}

test {
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = true
        html.required = true
        csv.required = false
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: [
                    // Exclude main class from coverage if needed
                    // '**/App.class'
            ])
        }))
    }
}

// JaCoCo coverage verification
jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.60 // 60% minimum coverage
            }
        }
    }
}

// Optional: Create a task that runs tests and generates coverage report
tasks.register('testCoverage') {
    group = 'verification'
    description = 'Runs tests and generates coverage report'
    dependsOn 'test'
    finalizedBy 'jacocoTestReport'

    doLast {
        println "Coverage report generated at: ${layout.buildDirectory.get()}/reports/jacoco/test/html/index.html"
    }
}
